Question: What is the difference between the Checked and Unchecked exceptions explain it
          with an example? How to create a User-defined unchecked exception class.
          
Answer:
 Checked Exception: It directly inherits the Throwable class except
        Runtime Exceptions and Error are called as checked exceptions.
        For Example: IOException, SQLException etc.
        
        Checked exceptions are called compile-time exceptions because these
        exceptions are checked at compile-time by the compiler.
        
        Example:❗❗❗❗
         import java.io.IOException;
			public class Main {
			
			public static void validate(int age)throws IOException {
			if(age<18) {
			
			throw new IOException("Person is not eligible to vote");
			}
			else {
			System.out.println("Person is eligible to vote!!");
			}
			}
			
			public static void main(String args[]){
			
			try {
			validate(13);
			} catch (IOException e) {
			e.printStackTrace();
			}
			System.out.println("rest of the code...");
			}
			}
         
        
Unchecked Exception: It inherits the Runtime Exception are known as
        unchecked exceptions.Unchecked exceptions are not checked at
        compile-time, but they are checked at runtime.
        For Example: Arithmetic Exception, NullPointerException,
        ArrayIndexOutOfBoundsException, etc 
        
        if a program throws anunchecked exception, and even if we didn’t
        handle or declare it, the program would not give a compilation error.
        
        
        Example:❗❗❗❗❗
        
        public class Main {

		public static void validate(int age) {
		if(age<18) {
		
		throw new ArithmeticException("Person is not eligible to vote");
		}
		else {
		System.out.println("Person is eligible to vote!!");
		}
		}
	 public static void main(String args[]){
	 validate(13);
	 System.out.println("rest of the code...");
	}
	}
	
	
User-Defined Exception Class:
   
   Example:❗❗❗❗
   package accountpackage;

public class InsufficientFundsException extends Exception {
	 
	public InsufficientFundsException() {
		
	}
	
	public InsufficientFundsException(String message)
	{
		super(message);
	}

}	

